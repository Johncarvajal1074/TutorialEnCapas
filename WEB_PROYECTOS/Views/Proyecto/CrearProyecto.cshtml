@model ENTIDAD.Proyecto

@{
    ViewBag.Title = "CrearProyecto";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

    <form action="@Url.Action("CrearProyecto", "Proyecto")" method="post" id="frmCrearProyecto">

        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Crear Nuevo Proyecto</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                <label class="control-label col-md-2">Nombre Proyecto</label>
                <div class="col-md-10">
                    <input type="text" class="form-control" id="NombreProyecto" name="NombreProyecto" />
                    @Html.ValidationMessageFor(model => model.NombreProyecto, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">Fecha Inicio</label>
                <div class="col-md-10">
                    @*se recomienda usar zebra datepicker para campos fecha*@
                    <input type="date" class="form-control" id="FechaInicio" name="FechaInicio" />
                    @Html.ValidationMessageFor(model => model.FechaInicio, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">Fecha Fin</label>
                <div class="col-md-10">
                    <input type="date" class="form-control" id="FechaFin" name="FechaFin" />
                    @Html.ValidationMessageFor(model => model.FechaFin, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Crear" class="btn btn-default" />
                </div>
            </div>
        </div>
    </form>

<div>
    @Html.ActionLink("Regresar", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $("#frmCrearProyecto").submit(function (event) {
            event.preventDefault(); //evita que la pagina se recargue
            var post_url = $(this).attr("action");
            var request_method = $(this).attr("method");
            var form_data = $(this).serializeArray();
            console.log(form_data);
            $.ajax({
                url: post_url,
                type: request_method,
                data: form_data
            }).done(function (response) {
                console.log(response);
                if (response.ok) {
                    //alert("Proyecto creado correctamente");
                    location.href = response.toRedirect;
                    
                } else {
                    alert(response.msg);
                }
               
            }).fail(function (jqXHR, textStatus, errorThrown) {
                /*objeto jqXHR: es un objeto que contiene todos los datos de la solicitud ajax realizada,
                    incluyendo la propiedad jqXHR.status que entre otros trae el codigo estado HTTP de la respuesta.

                  string textStatus: texto que describe el tipo de error, que puede ser (null, abort, timeout, NO transport, parseerror.)
   
                  string errorThrown: si hay un error HTTP, errorThrown contiene el texto de la cabecera HTTP de estado.
                   ejemplo para un error 404 es (Not found) y para un 500 es (Internal Server Error).
                */

            });
        });
    </script>
}
